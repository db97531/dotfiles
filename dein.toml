[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
  let g:go_fmt_command = "goimports"
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_operators = 1
  let g:go_term_enabled = 1
  let g:go_highlight_build_constraints = 1
  let g:go_gocode_unimported_packages = 1
  nmap <Leader>t :GoTest<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
hook_add = '''
  imap <C-k>  <Plug>(neosnippet_expand_or_jump)
  smap <C-k>  <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>  <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets']
on_i = 1
on_ft = ['snippet']

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap <silent> <Leader>gd :Gdiff<CR>
  nnoremap <silent> <Leader>gs :Gstatus<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_highlight_lines = 1
  nnoremap <silent> <Leader><ESC><ESC> :GitGutterLineHighlightsToggle<CR>
  highlight GitGutterDeleteLine ctermfg=NONE ctermbg=238
'''

[[plugins]]
repo = 'lambdalisue/vim-gista'
hook_add = '''
  let g:gista#client#default_username = 'db97531'
'''

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
  "インサートモードで開始
  " let g:unite_enable_start_insert=1
  nnoremap <Leader>ub :<C-u>Unite buffer<CR>
  nnoremap <leader>uf :<C-u>UniteWithBufferDir file file/new -buffer-name=file<CR>
  nnoremap <leader>um :<C-u>Unite file_mru buffer<CR>
  nnoremap <leader>ut :<C-u>Unite tab<CR>
  nnoremap <leader>ur :<C-u>Unite -buffer-name=register register<CR>
  nnoremap <leader>uh :<C-u>Unite history/yank<CR>

  " ディレクトリを指定してgrep検索
  nnoremap <Leader>ug :<C-u>Unite grep -buffer-name=search-buffer<CR>
  " grep検索結果の再呼出
  nnoremap <Leader>,  :<C-u>UniteResume search-buffer<CR>

  "grepにagを使用する
  if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
    let g:unite_source_grep_recursive_opt = ''
  endif

  "ドットファイルも表示する
  call unite#custom#source('file', 'matchers', 'matcher_default')

  "ESC*2でuniteを終了
  autocmd FileType unite call s:unite_my_settings()
  function! s:unite_my_settings()"{{{
      nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  endfunction"}}}
'''

[[plugins]]
repo = 'Shougo/unite-outline'
hook_add = '''
  nnoremap <Leader>uo :<C-u>Unite outline<CR>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'

# [[plugins]]
# repo = 'Townk/vim-autoclose'

# [[plugins]]
# repo = 'Raimondi/delimitMate'

# [[plugins]]
# repo = 'jiangmiao/auto-pairs'


[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled=1
'''

[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
  let g:user_emmet_settings={ 'variables' : {'lang' : 'ja'}}
'''

# [[plugins]]
# repo = 'tyru/caw.vim.git'
# hook_add = '''
#   " nmap <Leader>c<Leader> <Plug>(caw:hatpos:toggle)
#   " vmap <Leader>c<Leader> <Plug>(caw:hatpos:toggle)
# '''

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
  nmap <Leader>c<Leader> :TComment<CR>
  vmap <Leader>c<Leader> :TComment<CR>
  nmap <Leader>cb :TCommentBlock<CR>
  vmap <Leader>cb :TCommentBlock<CR>
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_use_migemo = 1
  " nmap <S-CR> <Plug>(easymotion-s2)
  let g:EasyMotion_do_mapping = 0
  nmap <Leader><CR> <Plug>(easymotion-s2)
  " map f <Plug>(easymotion-fl)
  " map t <Plug>(easymotion-tl)
  " map F <Plug>(easymotion-Fl)
  " map T <Plug>(easymotion-Tl)
'''

# [[plugins]]
# repo = 'othree/yajs.vim'
# on_ft = 'javascript'
#
# [[plugins]]
# repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# [[plugins]]
# repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
  \   "_" : {
  \       "runner" : "vimproc",
  \       "runner/vimproc/updatetime" : 60,
  \       "split" : "vertical",
  \   },
  \}
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'kana/vim-operator-user.git'

[[plugins]]
repo = 'kana/vim-operator-replace.git'
hook_add = '''
  map R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = '''
  let g:switch_mapping = "-"
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<C-w>r'
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
  vmap v <Plug>(expand_region_expand)
  vmap <C-v> <Plug>(expand_region_shrink)
  let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i'   :0,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ 'il'  :0,
      \ 'ip'  :0,
      \ 'ie'  :0,
      \ }
'''

[[plugins]]
# repo = 'vim-scripts/Wombat'
repo = 'sjl/badwolf'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  " au MyAutoCmd VimEnter * nested colorscheme wombat
  au MyAutoCmd VimEnter * nested colorscheme badwolf
'''
[[plugins]]
repo = 'scrooloose/syntastic'

[[plugins]]
repo = 'millermedeiros/vim-esformatter'
hook_add = '''
  nnoremap <silent> <leader>es :Esformatter<CR>
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]
repo = 'evidens/vim-twig'

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  nmap <F8> :TagbarToggle<CR>
'''

[[plugins]]
repo = 'google/yapf'
on_ft = 'python'
rtp = 'plugins/vim'
hook_add = '''
  map <C-Y> :call yapf#YAPF()<cr>
  imap <C-Y> <c-o>:call yapf#YAPF()<cr>
'''

[[plugins]]
repo = 'maksimr/vim-jsbeautify'
hook_add = '''
  " for html
  autocmd FileType html noremap <buffer> <Leader>b :call HtmlBeautify()<cr>
  " for css or scss
  autocmd FileType css noremap <buffer> <Leader>b :call CSSBeautify()<cr>
'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
  nnoremap <silent> <Leader>gl :Agit<CR>
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
'''

#[[plugins]]
#repo = 'scrooloose/nerdcommenter'
#hook_add = '''
#  let g:NERDDefaultAlign = 'left'
#'''

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'janko-m/vim-test'
depends = ['vim-dispatch']
hook_add = '''
  let g:test#strategy = 'dispatch'
  " let g:test#strategy = 'neovim'
'''

[[plugins]]
repo = 'aliev/vim-compiler-python'

[[plugins]]
repo = 'lambdalisue/vim-django-support'
on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]
repo = 'rhysd/vim-clang-format'
hook_add = '''
  autocmd FileType c ClangFormatAutoEnable
'''

# [[plugins]]
# repo = 'sebastianmarkow/deoplete-rust'
[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = '''
  " TextEdit might fail if hidden is not set.
  set hidden

  " Some servers have issues with backup files, see #649.
  set nobackup
  set nowritebackup

  " Give more space for displaying messages.
  set cmdheight=2

  " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
  " delays and poor user experience.
  set updatetime=300

  " Don't pass messages to |ins-completion-menu|.
  set shortmess+=c

  " Always show the signcolumn, otherwise it would shift the text each time
  " diagnostics appear/become resolved.
  if has("patch-8.1.1564")
    " Recently vim can merge signcolumn and number column into one
    set signcolumn=number
  else
    set signcolumn=yes
  endif

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
  " position. Coc only does snippet and additional edit on confirm.
  " <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
  if exists('*complete_info')
    inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
  else
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
  endif

  " Use `[g` and `]g` to navigate diagnostics
  " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)

  " Formatting selected code.
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Applying codeAction to the selected region.
  " Example: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap keys for applying codeAction to the current buffer.
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Apply AutoFix to problem on the current line.
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Map function and class text objects
  " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  " Use CTRL-S for selections ranges.
  " Requires 'textDocument/selectionRange' support of language server.
  nmap <silent> <C-s> <Plug>(coc-range-select)
  xmap <silent> <C-s> <Plug>(coc-range-select)

  " Add `:Format` command to format current buffer.
  command! -nargs=0 Format :call CocAction('format')

  " Add `:Fold` command to fold current buffer.
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " Add `:OR` command for organize imports of the current buffer.
  command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

  " Add (Neo)Vim's native statusline support.
  " NOTE: Please see `:h coc-status` for integrations with external plugins that
  " provide custom statusline: lightline.vim, vim-airline.
  set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

  " Mappings for CoCList
  " Show all diagnostics.
  nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
  " Manage extensions.
  nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
  " Show commands.
  nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document.
  nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols.
  nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list.
  nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
'''

[[plugins]]
repo = "MaxMEllon/vim-jsx-pretty"
