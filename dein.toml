[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
  let g:go_fmt_command = "goimports"
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_operators = 1
  let g:go_term_enabled = 1
  let g:go_highlight_build_constraints = 1
  let g:go_gocode_unimported_packages = 1
  nmap <Leader>t :GoTest<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
hook_add = '''
  imap <C-k>  <Plug>(neosnippet_expand_or_jump)
  smap <C-k>  <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>  <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets']
on_i = 1
on_ft = ['snippet']

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap <silent> <Leader>gd :Gdiff<CR>
  nnoremap <silent> <Leader>gs :Gstatus<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_highlight_lines = 1
  nnoremap <silent> <Leader><ESC><ESC> :GitGutterLineHighlightsToggle<CR>
  highlight GitGutterDeleteLine ctermfg=NONE ctermbg=238
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1

  inoremap <expr><C-g>     deoplete#undo_completion()
  inoremap <expr><C-l>     deoplete#complete_common_string()
  inoremap <expr><CR>      pumvisible() ? deoplete#close_popup() : "<CR>"
  inoremap <expr><TAB>     pumvisible() ? "\<C-n>" : "\<TAB>"

  inoremap <expr><C-y>  deoplete#close_popup()
  inoremap <expr><C-e>  deoplete#cancel_popup()
  " Endwiseとの併用のための設定
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    " return deoplete#smart_close_popup() . "\<CR>"
    " For no inserting <CR> key.
    return pumvisible() ? deoplete#close_popup() : "\<CR>"
  endfunction

  if !exists('g:deoplete#omni_patterns') | let g:deoplete#omni_patterns = {} | endif

  let g:deoplete#omni_patterns.php = '\h\w*\|[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
	let g:deoplete#omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'

  inoremap . .<c-x><c-u>
	let g:deoplete#omni_patterns.java = '[^. *\t]\.\w*'
'''

# [[plugins]]
# repo = 'Rip-Rip/clang_complete'
[[plugins]]
repo = 'justmao945/vim-clang'

[[plugins]]
repo = 'c9s/perlomni.vim'

[[plugins]]
repo = 'fishbullet/deoplete-ruby'

[[plugins]]
repo = 'zchee/deoplete-go'

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'


[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
  " <leader>rがquickrunとかぶるため大文字のRに変更
  let g:jedi#rename_command = '<Leader>R'
'''

[[plugins]]
repo = 'lambdalisue/vim-pyenv'
depends = ['jedi-vim']
on_ft = 'python'

[[plugins]]
repo = 'lambdalisue/vim-gista'
hook_add = '''
  let g:gista#client#default_username = 'db97531'
'''

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
  "インサートモードで開始
  " let g:unite_enable_start_insert=1
  nnoremap <Leader>ub :<C-u>Unite buffer<CR>
  nnoremap <leader>uf :<C-u>UniteWithBufferDir file file/new -buffer-name=file<CR>
  nnoremap <leader>um :<C-u>Unite file_mru buffer<CR>
  nnoremap <leader>ut :<C-u>Unite tab<CR>
  nnoremap <leader>ur :<C-u>Unite -buffer-name=register register<CR>
  nnoremap <leader>uh :<C-u>Unite history/yank<CR>

  " ディレクトリを指定してgrep検索
  nnoremap <Leader>ug :<C-u>Unite grep -buffer-name=search-buffer<CR>
  " grep検索結果の再呼出
  nnoremap <Leader>,  :<C-u>UniteResume search-buffer<CR>

  "grepにagを使用する
  if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
    let g:unite_source_grep_recursive_opt = ''
  endif

  "ドットファイルも表示する
  call unite#custom#source('file', 'matchers', 'matcher_default')

  "ESC*2でuniteを終了
  autocmd FileType unite call s:unite_my_settings()
  function! s:unite_my_settings()"{{{
      nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  endfunction"}}}
'''

[[plugins]]
repo = 'Shougo/unite-outline'
hook_add = '''
  nnoremap <Leader>uo :<C-u>Unite outline<CR>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'

# [[plugins]]
# repo = 'Townk/vim-autoclose'

# [[plugins]]
# repo = 'Raimondi/delimitMate'

[[plugins]]
repo = 'jiangmiao/auto-pairs'


[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled=1
'''

[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
  let g:user_emmet_settings={ 'variables' : {'lang' : 'ja'}}
'''

[[plugins]]
repo = 'tyru/caw.vim.git'
hook_add = '''
  nmap <C-K> <Plug>(caw:hatpos:toggle)
  vmap <C-K> <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_use_migemo = 1
  " nmap <S-CR> <Plug>(easymotion-s2)
  let g:EasyMotion_do_mapping = 0
  nmap <Leader><CR> <Plug>(easymotion-s2)
  " map f <Plug>(easymotion-fl)
  " map t <Plug>(easymotion-tl)
  " map F <Plug>(easymotion-Fl)
  " map T <Plug>(easymotion-Tl)
'''

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
  \   "_" : {
  \       "runner" : "vimproc",
  \       "runner/vimproc/updatetime" : 60,
  \       "split" : "vertical",
  \   },
  \}
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'kana/vim-operator-user.git'

[[plugins]]
repo = 'kana/vim-operator-replace.git'
hook_add = '''
  map R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = '''
  let g:switch_mapping = "-"
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<C-w>r'
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
  vmap v <Plug>(expand_region_expand)
  vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]
# repo = 'vim-scripts/Wombat'
repo = 'sjl/badwolf'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  " au MyAutoCmd VimEnter * nested colorscheme wombat
  au MyAutoCmd VimEnter * nested colorscheme badwolf
'''
[[plugins]]
repo = 'scrooloose/syntastic'

[[plugins]]
repo = 'millermedeiros/vim-esformatter'
hook_add = '''
  nnoremap <silent> <leader>es :Esformatter<CR>
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]
repo = 'evidens/vim-twig'

[[plugins]]
repo = 'ervandew/eclim'

[[plugins]]
repo = 'posva/vim-vue'
