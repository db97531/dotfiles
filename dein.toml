[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
  let g:go_fmt_command = "goimports"
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_operators = 1
  let g:go_term_enabled = 1
  let g:go_highlight_build_constraints = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
hook_add = '''
  imap <C-k>  <Plug>(neosnippet_expand_or_jump)
  smap <C-k>  <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>  <Plug>(neosnippet_expand_target)
'''
[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets']
on_i = 1
on_ft = ['snippet']

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap <silent> <Leader>gd :Gdiff<CR>
  nnoremap <silent> <Leader>gs :Gstatus<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_highlight_lines = 1
  nnoremap <silent> <Leader><ESC><ESC> :GitGutterLineHighlightsToggle<CR>
'''

[[plugins]]
repo = 'Shougo/neocomplcache'
on_i = 1
hook_add = '''
  let g:acp_enableAtStartup = 0
  let g:neocomplcache_auto_completion_start_length = 1
  let g:neocomplcache_min_syntax_length = 1
  let g:neocomplcache_enable_at_startup = 1
  let g:neocomplcache_enable_smart_case = 1
  let g:neocomplcache_enable_smart_case = 1
  let g:neocomplcache_min_syntax_length = 1
  let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
  let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : ''
    \ }
  " Golangの補完設定
  if !exists('g:neocomplcache_omni_patterns')
      let g:neocomplcache_omni_patterns = {}
  endif
  let g:neocomplcache_omni_patterns.go = '\h\w*\.\?'
  
  " Pythonの補完設定
  if !exists('g:neocomplcache_force_omni_patterns')
  let g:neocomplcache_force_omni_patterns = {}
  endif
  let g:neocomplcache_force_omni_patterns.python = '[^. \t]\.\w*'

  inoremap <expr><C-g>     neocomplcache#undo_completion()
  inoremap <expr><C-l>     neocomplcache#complete_common_string()
  inoremap <expr><CR>  pumvisible() ? neocomplcache#close_popup() : "<CR>"
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
" 下記の行を有効にするとautocloseで片方のカッコを削除しても
" 対のカッコが削除されなくなる。
"  inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
"  inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
" 
  inoremap <expr><C-y>  neocomplcache#close_popup()
  inoremap <expr><C-e>  neocomplcache#cancel_popup()
" Endwiseとの併用のための設定
" <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return neocomplcache#smart_close_popup() . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
  endfunction
'''

[[plugins]]
repo = 'myhere/vim-nodejs-complete'
on_i = 1
hook_add = '''
  autocmd FileType javascript setlocal omnifunc=nodejscomplete#CompleteJS
  if !exists('g:neocomplcache_omni_functions')
    let g:neocomplcache_omni_functions = {}
  endif
  let g:neocomplcache_omni_functions.javascript = 'nodejscomplete#CompleteJS'
  let g:node_usejscomplete = 1
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
  " <leader>rがquickrunとかぶるため大文字のRに変更
  let g:jedi#rename_command = '<Leader>R'
'''

[[plugins]]
repo = 'lambdalisue/vim-pyenv'
depends = ['jedi-vim']
on_ft = 'python'

[[plugins]]
repo = 'lambdalisue/vim-gista'
hook_add = '''
  let g:gista#client#default_username = 'db97531'
'''

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
  "インサートモードで開始
  " let g:unite_enable_start_insert=1
  nnoremap <Leader>ub :<C-u>Unite buffer<CR>
  nnoremap <leader>uf :<C-u>UniteWithBufferDir file file/new -buffer-name=file<CR>
  nnoremap <leader>um :<C-u>Unite file_mru buffer<CR>
  nnoremap <leader>ur :<C-u>Unite -buffer-name=register register<CR>
  nnoremap <leader>uh :<C-u>Unite history/yank<CR>

  "ドットファイルも表示する
  call unite#custom#source('file', 'matchers', 'matcher_default')

  "ESC*2でuniteを終了
  autocmd FileType unite call s:unite_my_settings()
  function! s:unite_my_settings()"{{{
      nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  endfunction"}}}
'''

[[plugins]]
repo = 'Shougo/unite-outline'
hook_add = '''
  nnoremap <Leader>uo :<C-u>Unite outline<CR>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'

# [[plugins]]
# repo = 'Townk/vim-autoclose'

# [[plugins]]
# repo = 'Raimondi/delimitMate'

[[plugins]]
repo = 'jiangmiao/auto-pairs'


[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled=1 
'''

[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
  let g:user_emmet_settings={ 'variables' : {'lang' : 'ja'}}
'''

[[plugins]]
repo = 'tyru/caw.vim.git'
hook_add = '''
  nmap <C-K> <Plug>(caw:hatpos:toggle)
  vmap <C-K> <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_use_migemo = 1
  " nmap <S-CR> <Plug>(easymotion-s2)
  let g:EasyMotion_do_mapping = 0
  nmap <Leader><CR> <Plug>(easymotion-s2)
  map f <Plug>(easymotion-fl)
  map t <Plug>(easymotion-tl)
  map F <Plug>(easymotion-Fl)
  map T <Plug>(easymotion-Tl)
'''

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
  \   "_" : {
  \       "runner" : "vimproc",
  \       "runner/vimproc/updatetime" : 60,
  \       "split" : "vertical",
  \   },
  \}
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'kana/vim-operator-user.git'

[[plugins]]
repo = 'kana/vim-operator-replace.git'
hook_add = '''
  map R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'vim-scripts/Wombat'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  au MyAutoCmd VimEnter * nested colorscheme wombat
'''

