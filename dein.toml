[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap <silent> <Leader>gd :Gdiff<CR>
  nnoremap <silent> <Leader>gs :Gstatus<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_highlight_lines = 1
  nnoremap <silent> <Leader><ESC><ESC> :GitGutterLineHighlightsToggle<CR>
  highlight GitGutterDeleteLine ctermfg=NONE ctermbg=238
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent><C-t> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'

# [[plugins]]
# repo = 'Townk/vim-autoclose'

# [[plugins]]
# repo = 'Raimondi/delimitMate'

# [[plugins]]
# repo = 'jiangmiao/auto-pairs'


[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled=1
'''

[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
  let g:user_emmet_settings={ 'variables' : {'lang' : 'ja'}}
'''

# [[plugins]]
# repo = 'tyru/caw.vim.git'
# hook_add = '''
#   " nmap <Leader>c<Leader> <Plug>(caw:hatpos:toggle)
#   " vmap <Leader>c<Leader> <Plug>(caw:hatpos:toggle)
# '''

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
  nmap <Leader>c<Leader> :TComment<CR>
  vmap <Leader>c<Leader> :TComment<CR>
  nmap <Leader>cb :TCommentBlock<CR>
  vmap <Leader>cb :TCommentBlock<CR>
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_use_migemo = 1
  " nmap <S-CR> <Plug>(easymotion-s2)
  let g:EasyMotion_do_mapping = 0
  nmap <Leader><CR> <Plug>(easymotion-s2)
  " map f <Plug>(easymotion-fl)
  " map t <Plug>(easymotion-tl)
  " map F <Plug>(easymotion-Fl)
  " map T <Plug>(easymotion-Tl)
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# [[plugins]]
# repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
  \   "_" : {
  \       "runner" : "vimproc",
  \       "runner/vimproc/updatetime" : 60,
  \       "split" : "vertical",
  \   },
  \}
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'kana/vim-operator-user.git'

[[plugins]]
repo = 'kana/vim-operator-replace.git'
hook_add = '''
  map R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = '''
  let g:switch_mapping = "-"
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<C-w>r'
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
  vmap v <Plug>(expand_region_expand)
  vmap <C-v> <Plug>(expand_region_shrink)
  let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i'   :0,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ 'il'  :0,
      \ 'ip'  :0,
      \ 'ie'  :0,
      \ }
'''

[[plugins]]
# repo = 'vim-scripts/Wombat'
repo = 'sjl/badwolf'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  " au MyAutoCmd VimEnter * nested colorscheme wombat
  au MyAutoCmd VimEnter * nested colorscheme badwolf
'''
#[[plugins]]
#repo = 'scrooloose/syntastic'

# [[plugins]]
# repo = 'millermedeiros/vim-esformatter'
# hook_add = '''
#   nnoremap <silent> <leader>es :Esformatter<CR>
# '''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  nmap <F8> :TagbarToggle<CR>
'''

[[plugins]]
repo = 'google/yapf'
on_ft = 'python'
rtp = 'plugins/vim'
hook_add = '''
  map <C-Y> :call yapf#YAPF()<cr>
  imap <C-Y> <c-o>:call yapf#YAPF()<cr>
'''

[[plugins]]
repo = 'maksimr/vim-jsbeautify'
hook_add = '''
  " for html
  autocmd FileType html noremap <buffer> <Leader>b :call HtmlBeautify()<cr>
  " for css or scss
  autocmd FileType css noremap <buffer> <Leader>b :call CSSBeautify()<cr>
'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
  nnoremap <silent> <Leader>gl :Agit<CR>
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
'''

#[[plugins]]
#repo = 'scrooloose/nerdcommenter'
#hook_add = '''
#  let g:NERDDefaultAlign = 'left'
#'''

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'janko-m/vim-test'
depends = ['vim-dispatch']
hook_add = '''
  let g:test#strategy = 'dispatch'
  " let g:test#strategy = 'neovim'
'''

[[plugins]]
repo = 'aliev/vim-compiler-python'



# [[plugins]]
# repo = 'sebastianmarkow/deoplete-rust'
[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = '''
  " May need for Vim (not Neovim) since coc.nvim calculates byte offset by count
  " utf-8 byte sequence
  set encoding=utf-8
  " Some servers have issues with backup files, see #649
  set nobackup
  set nowritebackup

  " Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
  " delays and poor user experience
  set updatetime=300

  " Always show the signcolumn, otherwise it would shift the text each time
  " diagnostics appear/become resolved
  set signcolumn=yes

  " Use tab for trigger completion with characters ahead and navigate
  " NOTE: There's always complete item selected by default, you may want to enable
  " no select by `"suggest.noselect": true` in your configuration file
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config
  inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

  " Make <CR> to accept selected completion item or notify coc.nvim to format
  " <C-g>u breaks current undo, please make your own choice
  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
  inoremap <silent><expr> <C-j> coc#pum#visible() ? coc#pum#next(1) : "\<C-j>"
  inoremap <silent><expr> <C-k> coc#pum#visible() ? coc#pum#prev(1) : "\<C-k>"

  " ポップアップウィンドウのスクロール用キーコンフィグ
  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif

  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

'''

[[plugins]]
repo = "prabirshrestha/vim-lsp"

[[plugins]]
repo = "mattn/vim-lsp-settings"

[[plugins]]
repo = "mattn/vim-goimports"
